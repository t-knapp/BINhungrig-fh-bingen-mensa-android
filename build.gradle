task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

apply plugin: 'com.android.application'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
    }
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }

    maven { url 'http://repo.spring.io/libs-release' }
}

dependencies {

    // EventBus for communication between Service, Activity, Thread
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'
    compile 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.android.support:support-v13:23.1.1'

    // Apache MultipartEntity
    compile ('org.apache.httpcomponents:httpmime:4.3.6') {
        exclude module: 'httpclient'
    }
    compile 'org.apache.httpcomponents:httpclient-android:4.3.5'
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    useLibrary 'org.apache.http.legacy' // todo switch to HttpURLConnection someday

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 22
    }

    packagingOptions {
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {
        release {
            if (System.console() != null) {
                //See: https://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle
                // We can leave these in environment variables
                def keystorePathEnvName = "MOCO_KEYSTORE"
                def keyAliasEnvName = "MOCO_KEY_ALIAS"
                def keystorePath = System.getenv(keystorePathEnvName)
                keyAlias System.getenv(keyAliasEnvName)

                if (keystorePath == null || keyAlias == null) {
                    throw new GradleException("Environment paths for signing not set. " +
                            "Please create the following environment variables:\n" +
                            "- " + keystorePathEnvName + ": Point this to your keystore file.\n" +
                            "- " + keyAliasEnvName + ": This is the alias of the key to use.")
                }

                def keystoreFile = file(keystorePath)
                if (!keystoreFile.exists()) {
                    throw new GradleException("Could not find keystore in the given path.")
                }

                storeFile file(keystorePath)

                // These two lines make gradle believe that the signingConfigs
                // section is complete. Without them, tasks like installRelease
                // will not be available!
                storePassword "notYourRealPassword"
                keyPassword "notYourRealPassword"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFile 'proguard-android.txt'
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.release
        }
    }
}

task askForPasswords << {
    // Must create String because System.readPassword() returns char[]
    // (and assigning that below fails silently)
    if (System.console() != null) {
        def storePw = new String(System.console().readPassword("\nKeystore password: "))
        def keyPw = new String(System.console().readPassword("Key password: "))

        android.signingConfigs.release.storePassword = storePw
        android.signingConfigs.release.keyPassword = keyPw
    }
}

tasks.whenTaskAdded { theTask -> 
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn "askForPasswords"
    }
}
