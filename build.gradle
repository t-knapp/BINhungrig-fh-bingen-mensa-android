task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
    }

apply plugin: 'android'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.8.+'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.android.support:support-v4:19.0.+'
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {
        release {
            if (System.console() != null) {
                //See: https://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle
                // We can leave these in environment variables
                storeFile file(System.getenv("MOCO_KEYSTORE"))
                keyAlias System.getenv("MOCO_KEY_ALIAS")

                // These two lines make gradle believe that the signingConfigs
                // section is complete. Without them, tasks like installRelease
                // will not be available!
                storePassword "notYourRealPassword"
                keyPassword "notYourRealPassword"
            }
        }
    }

    buildTypes {
        release {
            runProguard true
            proguardFile 'proguard-android.txt'
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.release
        }
    }
}
    
task askForPasswords << {
    // Must create String because System.readPassword() returns char[]
    // (and assigning that below fails silently)
    if (System.console() != null) {
        def storePw = new String(System.console().readPassword("\nKeystore password: "))
        def keyPw  = new String(System.console().readPassword("Key password: "))

        android.signingConfigs.release.storePassword = storePw
        android.signingConfigs.release.keyPassword = keyPw
    }
}

tasks.whenTaskAdded { theTask -> 
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn "askForPasswords"
    }
}